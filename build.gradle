plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    //batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.12.0'


    //비동기 재시도
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'

    // aws
    implementation platform("software.amazon.awssdk:bom:2.25.33") // 버전 BOM 사용
    implementation "software.amazon.awssdk:s3"

    // mapstruct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'
}

// queryDsl 설정
def querydslDir = "build/generated/querydsl"

sourceSets {
    main {
        java {
            srcDirs += querydslDir
        }
    }
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
    options.compilerArgs << "-parameters"
}

clean {
    delete file(querydslDir)
}


tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // 테스트 실행 후 JaCoCo 리포트 생성
}

// JaCoCo 설정
jacocoTestReport {
    dependsOn test // 테스트가 완료된 후 실행
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    executionData fileTree(dir: "$buildDir/jacoco", include: "**/*.exec")

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // 자동 생성 클래스 제외
                    '**/Q*',  // QueryDSL 생성 클래스
                    '**/*MapperImpl*',  // MapStruct 구현체

                    // Spring Boot 관련 클래스 제외
                    '**/*Application*',  // Main Application 클래스
                    '**/config/**',  // 설정 클래스들
                    '**/*Config*',

                    // DTO/Entity/Exception 제외
                    '**/dto/**',  // DTO 패키지
                    '**/entity/**',  // Entity 패키지
                    '**/exception/**',  // Exception 패키지
                    '**/*Dto*',
                    '**/*Entity*',
                    '**/*Exception*',
                    '**/*Request*',
                    '**/*Response*',

                    // Enum 클래스 제외
                    '**/*Type*',
                    '**/*Status*',
                    '**/*Role*',
                    '**/*Level*',
                    '**/Gender*',
                    '**/Provider*',

                    // 보안 관련 상수 클래스
                    '**/BlackList*',
                    '**/JwtSession*',

                    // 특정 패키지 제외
                    '**/converter/**',  // Converter 클래스들
                    '**/util/**'  // Utility 클래스들
            ])
        }))
    }
}

// JaCoCo 커버리지 검증
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    // 검증에서 제외할 클래스들 (리포트와 동일한 제외 패턴 적용)
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // 자동 생성 클래스 제외
                    '**/Q*',
                    '**/*MapperImpl*',

                    // Spring Boot 관련 클래스 제외
                    '**/*Application*',
                    '**/config/**',
                    '**/*Config*',

                    // DTO/Entity/Exception 제외
                    '**/dto/**',
                    '**/entity/**',
                    '**/exception/**',
                    '**/*Dto*',
                    '**/*Entity*',
                    '**/*Exception*',
                    '**/*Request*',
                    '**/*Response*',

                    // Enum 클래스 제외
                    '**/*Type*',
                    '**/*Status*',
                    '**/*Role*',
                    '**/*Level*',
                    '**/Gender*',
                    '**/Provider*',

                    // 보안 관련 상수 클래스
                    '**/BlackList*',
                    '**/JwtSession*',

                    // 특정 패키지 제외
                    '**/converter/**',
                    '**/util/**',

                    // batch 관련 제외
                    '**/batch/**'
            ])
        }))
    }
}

