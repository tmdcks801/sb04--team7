spring:
  application:
    name: ootd
  profiles:
    active:
      - ${SPRING_PROFILES_ACTIVE}

  cache:
    type: ${CACHE_TYPE:redis}  # 기본값: Redis 사용, 환경변수로 caffeine 설정 가능
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 1s

    mongodb:
      uri: ${MONGODB_URI}
      database: ${NOTIFICATIN_DB}
      uuid-representation: standard
      auto-index-creation: true
  servlet:
    multipart:
      maxFileSize: 10MB # 파일 하나의 최대 크기
      maxRequestSize: 30MB  # 한 번에 최대 업로드 가능 용량
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000  # 30초
      idle-timeout: 600000       # 10분
      max-lifetime: 1800000      # 30분
      maximum-pool-size: 20      # 커넥션 풀 크기 증가
      minimum-idle: 10
      validation-timeout: 5000
  jpa:
    hibernate:
      ddl-auto: validate
    jdbc:
      batch_size: 100      # ddl 몇개 모아서 DB에 전송할지
      order_inserts: true
      order_updates: true
    open-in-view: false
  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: always

  config:
    import: optional:file:.env[.properties]
  mail:
    host: smtp.gmail.com
    port: 587
    username: ootdboo1@gmail.com
    password: ${GOOGLE_APP_PWD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            #            client-secret: ${KAKAO_CLIENT_SECRET}
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,loggers,caches,prometheus
  endpoint:
    health:
      show-details: always
  observations:
    annotations:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

kakao:
  api:
    key: ${KAKAO_API_KEY}

weather:
  api:
    key: ${WEATHER_API_KEY}
  batch:
    enabled: true
    grid-size: 10
    chunk-size: 300        # 청크 크기
    regions-per-partition: 10  # 파티션당 지역 수
    numOfRows: 1000
    thread-pool:
      core-size: 5
      max-size: 10
    schedule:
      cron: "0 30 2,5,8,11,14,17,20,23 * * *"
    cleanup:
      enabled: true                    # 정리 스케줄러 활성화
      retention-days: 2                # 보존할 일수 (2일)
      cron: "0 0 3 * * *"             # 매일 새벽 3시 실행
      preserve-feed-referenced: true   # Feed 참조 데이터 보존 여부
  regions:
    file:
      path: classpath:regions.csv

recommendation:
  preload:
    enabled: true
    cron: "0 0 6 * * *"  # 매일 오전 6시

info:
  name: ootd
  version: 1.7.0
  java:
    version: 17
  spring-boot:
    version: 3.5.3
  config:
    datasource:
      url: ${spring.datasource.url}
      driver-class-name: ${spring.datasource.driver-class-name}
    jpa:
      ddl-auto: ${spring.jpa.hibernate.ddl-auto}
    storage:
      type: ${ootd.storage.type}
      path: ${ootd.storage.local.root-path}
    multipart:
      max-file-size: ${spring.servlet.multipart.maxFileSize}
      max-request-size: ${spring.servlet.multipart.maxRequestSize}

ootd:
  storage:
    type: s3
    s3:
      access-key: ${AWS_S3_ACCESS_KEY} # local -> .env, prod -> github secret
      secret-key: ${AWS_S3_SECRET_KEY}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_BUCKET}

logging:
  level:
    root: info
    # Spring Retry 관련 로그 끄기
    org.springframework.retry: WARN  # 또는 ERROR, OFF
    org.springframework.retry.support.RetryTemplate: WARN
    # Spring Batch 관련 로그도 끄기
    org.springframework.batch: WARN
    org.springframework.batch.core.step: WARN
    org.springframework.batch.item: WARN

app:
  jwt:
    secret: "F811B1184C98D8543B1351D93948481900aDYQ82347641"
    access-token-expiration: 900000
    refresh-token-expiration: 604800000
  mail:
    enabled: false
mongo:
  uri: ${MONGODB_URI_LOG}
  collection: ${MONGO_COLLECTION}

# Swagger/OpenAPI 설정
springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html


resilience4j:
  circuitbreaker:
    instances:
      redisBlacklist:
        registerHealthIndicator: true
        slidingWindowSize: 5
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 300s
        permittedNumberOfCallsInHalfOpenState: 2
